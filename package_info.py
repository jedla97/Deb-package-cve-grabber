from os import path
import subprocess
import argparse
import re

#get basic info about package
def info(path):
	output = []
	help_output = ""
	commands = ["dpkg -f " + path + " Package", "dpkg -f " + path + " Version"]
	dependencies_comand = "dpkg -f " + path + " Depends et al"
	
	for com in commands:
		help_output = subprocess.Popen(com, stdout=subprocess.PIPE, shell=True)	
		output.append(help_output.communicate()[0].decode("utf-8").strip("\n"))
	
	print(output)
		
	help_output = subprocess.Popen(dependencies_comand, stdout=subprocess.PIPE, shell=True)	
	output.append(help_output.communicate()[0].decode("utf-8").strip("\n").strip("Depends:").split(', '))
	
	return output
	
# get full changelog and return only version changelog 	
def get_changelog_info(path, output):
	# command for local changelog
	dependencies_comand = f"apt-listchanges --frontend text --which=changelogs --since={output[1].split('-', 1)[0]} {path}"
	
	# command for ubuntu web changelog
	dependencies_comand_web = f"curl http://changelogs.ubuntu.com/changelogs/pool/main/{output[0][0]}/{output[0]}/{output[0]}_{output[1]}/changelog"
	log = ""
	# try retriev local change when its not avaible try web
	try:
		log = subprocess.Popen(dependencies_comand, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
		log = log.communicate()[0].decode("utf-8")
		if re.search("Calling", log):
			raise Exception()
	except:	
		log = subprocess.Popen(dependencies_comand_web, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)	
		log = log.communicate()[0].decode("utf-8")
	
	finally:	
		return get_version_changelog_info(log, output[1])

# find and retunr changelog for specific fersion	
def get_version_changelog_info(log, version):
	output = ""
	actual_log = False
	rows = log.split('\n')
	for row in rows:
		if actual_log == True:
			if row == "\n":
				pass
			elif re.search(" -- ", row):
				return output
			else:
				output += row +"\n"
		if re.search(version, row):
			actual_log = True
	return output

# return list of CVE from string (changelog)
def get_cve_list(version_log):
	regex = "[Cc][Vv][Ee]-\d{4}-\d{4,7}"
	return list(set(re.findall(regex, version_log)))
	

# print basic info about package
def print_standard_output(output):
	print(f"Package name: {output[0]}")
	print(f"Package version: {output[1]}")
	print(f"Package dependencies: {', '.join(output[2])}")
	print(f"Changelog URL: http://changelogs.ubuntu.com/changelogs/pool/main/{output[0][0]}/{output[0]}/{output[0]}_{output[1]}/changelog")


# arguments for script
arg_parser = argparse.ArgumentParser()
arg_parser.add_argument('-p','--package', type=str, help="Package location", required=True)
arg_parser.add_argument('-c','--cve', action='store_true', help="Show CVE in version changelog")
arg_parser.add_argument('-l','--changelog', action='store_true', help="Show version changelog")
args = arg_parser.parse_args()


# logic for arguments
if path.exists(args.package):
	if args.cve == True and args.changelog == True:
		output = info(args.package)
		print_standard_output(output)
		log = get_changelog_info(args.package, output)
		cve_list = get_cve_list(log)
		print(f"CVE: {', '.join(cve_list)}")
		print(f"Changelog: {log}")
	elif args.cve == True:
		output = info(args.package)
		print_standard_output(output)
		log = get_changelog_info(args.package, output)
		cve_list = get_cve_list(log)
		print(f"CVE: {', '.join(cve_list)}")
	elif args.changelog == True:
		output = info(args.package)
		print_standard_output(output)
		log = get_changelog_info(args.package, output)
		print(f"Changelog: {log}")
	else:
		output = info(args.package)
		print_standard_output(output)
else:
	print(".deb file not exist, try with valid file.")
	



